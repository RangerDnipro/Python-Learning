"""
Модуль перевіряє на валідність email-адреси,
знаходить серед тексту телефонні номери у заданих форматах
та перевіряє паролі на надійність
"""

import re


def is_valid_email(email: str) -> bool:
    """
    Перевіряємо, чи є email-адреса валідною за заданими правилами:
    - Частина перед @ може містити букви, цифри або точки
      Точка не може бути на початку або в кінці
    - Домен може складатися з букв або цифр
    - Домен верхнього рівня (TLD) має містити від 2 до 6 символів
    :param email: Строка з email-адресою, яку потрібно перевірити
    :return: True, якщо email валідний, інакше False
    """

    # Регулярний вираз для перевірки валідності email
    pattern = r"^[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*@[a-zA-Z0-9]+\.[a-zA-Z]{2,6}$"

    # Перевіряємо відповідність email регулярному виразу
    return bool(re.match(pattern, email))


def find_phone_numbers(text: str) -> list[str]:
    """
    Знаходимо усі телефонні номери у вказаному тексті
    Підтримувані формати номерів:
    - (123) 456-7890
    - 123-456-7890
    - 123.456.7890
    - 1234567890
    :param text: Текст, у якому потрібно знайти телефонні номери
    :return: Список знайдених телефонних номерів
    """
    # Регулярний вираз для пошуку телефонних номерів
    pattern = r"\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}"

    # Повертаємо всі знайдені номери у вигляді списку
    return re.findall(pattern, text)


def is_strong_password(password: str) -> bool:
    """
    Перевіряємо, чи є пароль надійним за заданими правилами
    Правила надійного пароля:
    - Мінімум 8 символів
    - Принаймні одна цифра
    - Хоча б одна велика літера та одна мала літера
    - Хоча б один спеціальний символ (@, #, $, %, & тощо)
    :param password: Строка з паролем, який потрібно перевірити
    :return: True, якщо пароль надійний, інакше False
    """
    # Регулярний вираз для перевірки валідності пароля
    pattern = r"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$%^&+=!]).{8,}$"

    # Перевіряємо відповідність пароля регулярному виразу
    return bool(re.match(pattern, password))


# Тестові приклади
if __name__ == "__main__":
    emails = [
        "example@domain.com",  # Валідний
        ".example@domain.com",  # Невалідний (точка на початку)
        "example.@domain.com",  # Невалідний (точка в кінці перед @)
        "example@domain",  # Невалідний (немає TLD)
        "example@domain.c",  # Невалідний (занадто короткий TLD)
        "example@domain.comm",  # Валідний
        "ex.ample@domain.org",  # Валідний
        "ex@dom.co.uk",  # Валідний
        "example@domain.123",  # Невалідний (TLD не повинно містити цифри)
    ]

    # Виводимо результати перевірки для кожного email
    print("\nРезультати перевірки email адрес на валідність:")
    for my_email in emails:
        print(f"{my_email}: {'Валідний' if is_valid_email(my_email) else 'Невалідний'}")

    # Тестові приклади для пошуку телефонних номерів
    MY_TEXT = (
        "Приклади телефонних номерів: (123) 456-7890, 123-456-7890, 123.456.7890, 1234567890, "
        "(123) 456 7890, 123 456 7890, 123-456-789, 123.4567.890, 12-3456-7890, "
        "12356 7890, 123 456(89)0, 23-456-789, .1.23.4567.890, 12-3456-7_890."
    )
    phone_numbers = find_phone_numbers(MY_TEXT)
    print("\nЗнайдені телефонні номери:", *phone_numbers, sep="\n")

    # Тестові приклади для перевірки надійності пароля
    passwords = [
        "Password123!",  # Надійний
        "password",  # Ненадійний (немає великих літер, цифр, спецсимволів)
        "PASSWORD123",  # Ненадійний (немає малих літер, спецсимволів)
        "Passw1",  # Ненадійний (занадто короткий)
        "Password!",  # Ненадійний (немає цифр)
        "Password123",  # Ненадійний (немає спецсимволів)
        "P@ssw0rd123",  # Надійний
    ]

    # Виводимо результати перевірки для кожного пароля
    print("\nРезультати перевірки паролів на валідність:")
    for my_password in passwords:
        print(f"{my_password}: {'Надійний' if is_strong_password(my_password) else 'Ненадійний'}")
