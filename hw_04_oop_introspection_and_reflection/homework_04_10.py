"""
Завдання 10: Метаклас для контролю створення класів
Реалізуйте метаклас SingletonMeta, який гарантує, що клас може мати лише один екземпляр (патерн Singleton).
Якщо екземпляр класу вже створений, наступні виклики повинні повертати той самий об'єкт.
"""


class SingletonMeta(type):
    """
    Метаклас SingletonMeta забезпечує, що кожен клас, створений з його використанням, матиме лише один екземпляр
    :param _instances: Словник, що зберігає екземпляри класів, для яких метаклас гарантує унікальність
    """

    _instances = {}

    def __call__(cls, *args, **kwargs):
        """
        Контролює створення нових екземплярів класу
        Якщо екземпляр класу вже створений, повертає той самий об'єкт
        :param cls: Клас, для якого створюється або повертається екземпляр
        :param *args: Позиційні аргументи для конструктора класу
        :param **kwargs: Іменовані аргументи для конструктора класу
        :return instance: Екземпляр класу, створений або вже існуючий
        """
        if cls not in cls._instances:
            # Якщо екземпляр класу не існує, створюємо новий
            instance = super().__call__(*args, **kwargs)
            cls._instances[cls] = instance
        return cls._instances[cls]


class Singleton(metaclass=SingletonMeta):
    """
    Клас Singleton використовує метаклас SingletonMeta для гарантії, що він матиме лише один екземпляр
    """

    def __init__(self):
        """Ініціалізує екземпляр Singleton та виводить повідомлення про його створення"""
        print("Creating instance")


# Тестування патерну Singleton
# Створює новий екземпляр і виводить повідомлення
obj1 = Singleton()
# Не створює новий екземпляр, повертає існуючий
obj2 = Singleton()

# Перевірка, чи це той самий об'єкт
print(obj1 is obj2)
